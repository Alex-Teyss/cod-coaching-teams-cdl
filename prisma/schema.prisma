// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Configuration pour Prisma Postgres avec Accelerate intégré
// DATABASE_URL: URL Accelerate (avec connection pooling et cache global)
// DIRECT_DATABASE_URL: URL directe pour migrations et Prisma Studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")       // URL Accelerate pour les requêtes
  directUrl = env("DIRECT_DATABASE_URL") // URL directe pour les migrations
}

// Better Auth Models
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          Role      @default(PLAYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  teamId        String?
  team          Team?     @relation(fields: [teamId], references: [id])
  coachedTeams  Team[]    @relation("CoachToTeam")

  @@map("user")
}

enum Role {
  ADMIN
  COACH
  PLAYER
}

model Team {
  id          String       @id @default(cuid())
  name        String
  isValidated Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  coachId     String
  coach       User         @relation("CoachToTeam", fields: [coachId], references: [id])
  players     User[]
  invitations Invitation[]

  @@map("team")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String  @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  accessToken  String?
  refreshToken String?
  idToken      String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope        String?
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  teamId    String
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  expiresAt DateTime

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([email, teamId])
  @@index([email])
  @@index([teamId])
  @@map("invitation")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
